// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projeto.Data;

#nullable disable

namespace Projeto.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231213095105_Projeto2")]
    partial class Projeto2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Projeto.Models.Administrador", b =>
                {
                    b.Property<int>("Id_Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Admin"));

                    b.Property<string>("Nome_Admin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Admin");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Projeto.Models.Anexo", b =>
                {
                    b.Property<int>("Id_Anexo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Anexo"));

                    b.Property<int>("Id_Post")
                        .HasColumnType("int");

                    b.Property<string>("Nome_Anexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL_Anexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postId_Post")
                        .HasColumnType("int");

                    b.HasKey("Id_Anexo");

                    b.HasIndex("postId_Post");

                    b.ToTable("Anexo");
                });

            modelBuilder.Entity("Projeto.Models.Comenta", b =>
                {
                    b.Property<int>("ID_Comenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Comenta"));

                    b.Property<DateTime>("Data_Comentario")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Post")
                        .HasColumnType("int");

                    b.Property<int>("ID_Util")
                        .HasColumnType("int");

                    b.Property<int>("PostId_Post")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilizadorAutenticadoId_Util")
                        .HasColumnType("int");

                    b.HasKey("ID_Comenta");

                    b.HasIndex("PostId_Post");

                    b.HasIndex("UtilizadorAutenticadoId_Util");

                    b.ToTable("Comenta");
                });

            modelBuilder.Entity("Projeto.Models.Ficheiro", b =>
                {
                    b.Property<int>("Id_Ficheiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Ficheiro"));

                    b.Property<DateTime>("Data_Ficheiro")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Util")
                        .HasColumnType("int");

                    b.Property<string>("Local_Armazenamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Utilizador_AutenticadoId_Util")
                        .HasColumnType("int");

                    b.HasKey("Id_Ficheiro");

                    b.HasIndex("Utilizador_AutenticadoId_Util");

                    b.ToTable("Ficheiro");
                });

            modelBuilder.Entity("Projeto.Models.Grupo", b =>
                {
                    b.Property<int>("Id_Grupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Grupo"));

                    b.Property<bool>("Acesso")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Util")
                        .HasColumnType("int");

                    b.Property<string>("Nome_Grupo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilizadorId_Util")
                        .HasColumnType("int");

                    b.HasKey("Id_Grupo");

                    b.HasIndex("UtilizadorId_Util");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("Projeto.Models.Partilha", b =>
                {
                    b.Property<int>("ID_Partilha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Partilha"));

                    b.Property<int>("FicheiroId_Ficheiro")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Ficheiro")
                        .HasColumnType("int");

                    b.Property<int>("ID_Grupo")
                        .HasColumnType("int");

                    b.HasKey("ID_Partilha");

                    b.HasIndex("FicheiroId_Ficheiro");

                    b.HasIndex("GrupoId_Grupo");

                    b.ToTable("Partilha");
                });

            modelBuilder.Entity("Projeto.Models.PartilhaGrupo", b =>
                {
                    b.Property<int>("ID_PartilhaGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_PartilhaGrupo"));

                    b.Property<int>("GrupoId_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Post")
                        .HasColumnType("int");

                    b.Property<int>("PostId_Post")
                        .HasColumnType("int");

                    b.HasKey("ID_PartilhaGrupo");

                    b.HasIndex("GrupoId_Grupo");

                    b.HasIndex("PostId_Post");

                    b.ToTable("PartilhaGrupo");
                });

            modelBuilder.Entity("Projeto.Models.PedeAcesso", b =>
                {
                    b.Property<int>("ID_PedeAcesso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_PedeAcesso"));

                    b.Property<DateTime>("Data_Pedido")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Data_Resposta")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupoId_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Util")
                        .HasColumnType("int");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Resultado")
                        .HasColumnType("bit");

                    b.Property<int>("UtilizadorAutenticadoId_Util")
                        .HasColumnType("int");

                    b.HasKey("ID_PedeAcesso");

                    b.HasIndex("GrupoId_Grupo");

                    b.HasIndex("UtilizadorAutenticadoId_Util");

                    b.ToTable("PedeAcesso");
                });

            modelBuilder.Entity("Projeto.Models.Pertence", b =>
                {
                    b.Property<int>("ID_Pertence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Pertence"));

                    b.Property<DateTime>("Data_Adesao")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrupoId_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("ID_Util")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadorAutenticadoId_Util")
                        .HasColumnType("int");

                    b.HasKey("ID_Pertence");

                    b.HasIndex("GrupoId_Grupo");

                    b.HasIndex("UtilizadorAutenticadoId_Util");

                    b.ToTable("Pertence");
                });

            modelBuilder.Entity("Projeto.Models.Post", b =>
                {
                    b.Property<int>("Id_Post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Post"));

                    b.Property<DateTime>("Data_Post")
                        .HasColumnType("datetime2");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Utilizador_AutenticadoId_Util")
                        .HasColumnType("int");

                    b.Property<bool>("Visibiliade")
                        .HasColumnType("bit");

                    b.HasKey("Id_Post");

                    b.HasIndex("Utilizador_AutenticadoId_Util");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Projeto.Models.Utilizador_Autenticado", b =>
                {
                    b.Property<int>("Id_Util")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Util"));

                    b.Property<string>("Fotografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome_Autenticado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Util");

                    b.ToTable("Utilizador_Autenticado");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projeto.Models.Anexo", b =>
                {
                    b.HasOne("Projeto.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("postId_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("Projeto.Models.Comenta", b =>
                {
                    b.HasOne("Projeto.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "UtilizadorAutenticado")
                        .WithMany()
                        .HasForeignKey("UtilizadorAutenticadoId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("UtilizadorAutenticado");
                });

            modelBuilder.Entity("Projeto.Models.Ficheiro", b =>
                {
                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "Utilizador_Autenticado")
                        .WithMany()
                        .HasForeignKey("Utilizador_AutenticadoId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador_Autenticado");
                });

            modelBuilder.Entity("Projeto.Models.Grupo", b =>
                {
                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Projeto.Models.Partilha", b =>
                {
                    b.HasOne("Projeto.Models.Ficheiro", "Ficheiro")
                        .WithMany()
                        .HasForeignKey("FicheiroId_Ficheiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ficheiro");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("Projeto.Models.PartilhaGrupo", b =>
                {
                    b.HasOne("Projeto.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Projeto.Models.PedeAcesso", b =>
                {
                    b.HasOne("Projeto.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "UtilizadorAutenticado")
                        .WithMany()
                        .HasForeignKey("UtilizadorAutenticadoId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("UtilizadorAutenticado");
                });

            modelBuilder.Entity("Projeto.Models.Pertence", b =>
                {
                    b.HasOne("Projeto.Models.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "UtilizadorAutenticado")
                        .WithMany()
                        .HasForeignKey("UtilizadorAutenticadoId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("UtilizadorAutenticado");
                });

            modelBuilder.Entity("Projeto.Models.Post", b =>
                {
                    b.HasOne("Projeto.Models.Utilizador_Autenticado", "Utilizador_Autenticado")
                        .WithMany()
                        .HasForeignKey("Utilizador_AutenticadoId_Util")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilizador_Autenticado");
                });
#pragma warning restore 612, 618
        }
    }
}
